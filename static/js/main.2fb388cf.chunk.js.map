{"version":3,"sources":["types/SortType.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["SortedType","TodoList","todos","setSelectedTodo","className","map","todo","classNames","completed","title","type","onClick","id","TodoFilter","setSort","setQuery","query","onChange","event","target","value","all","active","placeholder","style","pointerEvents","length","get","url","delay","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","onClose","useState","userOfTodo","setUserOfTodo","useEffect","userId","user","href","email","name","App","setTodos","selectedTodo","isLoading","setOnLoading","sortType","setSortType","todosFromServer","filteredTodos","filter","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2fb388cf.chunk.js","sourcesContent":["export enum SortedType {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n","import classNames from 'classnames';\nimport { FC } from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  setSelectedTodo(todo: Todo): void,\n};\n\nexport const TodoList: FC<Props> = ({\n  todos,\n  setSelectedTodo,\n}) => (\n  <table\n    data-cy=\"listOfTodos\"\n    className=\"table is-narrow is-fullwidth\"\n  >\n    <tbody>\n      {todos.map(todo => (\n        <tr\n          key={todo.id}\n          className={classNames(\n            { 'has-background-danger-light has-text-danger': !todo.completed },\n            { 'has-background-success-light has-text-success': todo.completed },\n          )}\n        >\n          <td className=\"is-vcentered\">\n            <span className=\"icon is-size-5\">\n              <i className={classNames(\n                'fas',\n                { 'fa-square-xmark': !todo.completed },\n                { 'fa-check-square': todo.completed },\n              )}\n              />\n            </span>\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            {todo.title}\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              className=\"button is-warning\"\n              type=\"button\"\n              onClick={() => {\n                setSelectedTodo(todo);\n              }}\n            >\n              {`Show #${todo.id}`}\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","import { FC } from 'react';\nimport { SortedType } from '../../types/SortType';\n\ntype Props = {\n  setSort(value: SortedType): void,\n  setQuery(value: string): void,\n  query: string,\n};\n\nexport const TodoFilter: FC<Props> = ({ setSort, setQuery, query }) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          onChange={event => {\n            setSort(event.target.value as SortedType);\n          }}\n        >\n          <option value={SortedType.all}>All</option>\n          <option value={SortedType.active}>Active</option>\n          <option value={SortedType.completed}>Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"filterByTitle\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={(event) => setQuery(event.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n        {/* eslint-disable jsx-a11y/control-has-associated-label */}\n        {query.length > 0 && (\n          <button\n            type=\"button\"\n            className=\"delete has-text\"\n            onClick={() => setQuery('')}\n          />\n        )}\n      </span>\n    </p>\n  </form>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  return wait(1000)\n    .then(() => fetch(BASE_URL + url))\n    .then(res => res.json());\n}\n\nexport const getTodos = (): Promise<Todo[]> => {\n  return get<Todo[]>('/todos');\n};\n\nexport const getUser = (userId: number): Promise<User> => {\n  return get<User>(`/users/${userId}`);\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { FC, useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  onClose(state: Todo | null): void,\n  todo: Todo,\n};\n\nexport const TodoModal: FC<Props> = ({ onClose, todo }) => {\n  const [userOfTodo, setUserOfTodo] = useState<User>();\n\n  useEffect(() => {\n    getUser(todo.userId).then((user) => {\n      setUserOfTodo(user);\n    });\n  }, []);\n\n  return (\n    <div className=\"modal is-active\">\n      <div className=\"modal-background\" />\n\n      {!userOfTodo\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div className=\"modal-card-title has-text-weight-medium\">\n                {`Todo #${todo.id}`}\n              </div>\n              <a\n                href=\"#close\"\n                className=\"delete\"\n                onClick={() => onClose(null)}\n              >\n                Close\n              </a>\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\">\n                {todo.title}\n              </p>\n\n              <p className=\"block\">\n                {todo.completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong>}\n                {' by '}\n                <a href={`mailto:${userOfTodo.email}`}>\n                  {userOfTodo.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { SortedType } from './types/SortType';\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [query, setQuery] = useState('');\n  const [isLoading, setOnLoading] = useState(true);\n  const [sortType, setSortType] = useState<SortedType>(SortedType.all);\n\n  useEffect(() => {\n    getTodos()\n      .then(todosFromServer => {\n        setTodos(todosFromServer);\n        setOnLoading(false);\n      });\n  }, []);\n\n  const filteredTodos = todos.filter(todo => {\n    switch (sortType) {\n      case SortedType.completed:\n        return todo.title.includes(query) && todo.completed === true;\n      case SortedType.active:\n        return todo.title.includes(query) && todo.completed === false;\n      default:\n        return todo.title.includes(query);\n    }\n  });\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                setSort={setSortType}\n                setQuery={setQuery}\n                query={query}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && (\n                <Loader />\n              )}\n              <TodoList\n                todos={filteredTodos}\n                setSelectedTodo={setSelectedTodo}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          onClose={setSelectedTodo}\n          todo={selectedTodo}\n        />\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport './general.scss';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}